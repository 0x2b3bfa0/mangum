{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mangum Mangum is a library for adapting ASGI applications to use on FaaS platforms. Important : This project is under active development and in an experimental/unstable state. Supported Platforms AWS Lambda + API Gateway Azure Functions Requirements Python 3.6+ Installation pip3 install mangum Dependencies Currently the only optional dependency is: azure-functions - Required for azure_handler . Example Below is a basic ASGI application example that can be used with handler methods: class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) AWS Lambda + API Gateway from mangum.handlers.aws import aws_handler def asgi_handler ( event , context ): return aws_handler ( App , event , context ) Azure Functions from mangum.handlers.azure import azure_handler def asgi_handler ( req ): return azure_handler ( App , req )","title":"Introduction"},{"location":"#mangum","text":"Mangum is a library for adapting ASGI applications to use on FaaS platforms. Important : This project is under active development and in an experimental/unstable state.","title":"Mangum"},{"location":"#supported-platforms","text":"AWS Lambda + API Gateway Azure Functions","title":"Supported Platforms"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"pip3 install mangum","title":"Installation"},{"location":"#dependencies","text":"Currently the only optional dependency is: azure-functions - Required for azure_handler .","title":"Dependencies"},{"location":"#example","text":"Below is a basic ASGI application example that can be used with handler methods: class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" })","title":"Example"},{"location":"#aws-lambda-api-gateway","text":"from mangum.handlers.aws import aws_handler def asgi_handler ( event , context ): return aws_handler ( App , event , context )","title":"AWS Lambda + API Gateway"},{"location":"#azure-functions","text":"from mangum.handlers.azure import azure_handler def asgi_handler ( req ): return azure_handler ( App , req )","title":"Azure Functions"},{"location":"azure-how-to/","text":"How to deploy an ASGI app to Azure This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information. The complete example project is available here . Requirements Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser Step 1 - Create the function app in Azure In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line. Step 2 - Setup the local function environment The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate Step 3 - Configure the local Python project Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger. Step 4 - Implement a basic ASGI application Install Mangum from pip: pip install mangum This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.handlers.azure import azure_handler class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) return azure_handler ( App , req ) This is a basic ASGI app example that uses the azure_handler that executes the ASGI HTTP request-response cycle. Run the app again with the following command to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint. Step 5 - Deploy the ASGI app function Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in app function, e.g.: Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test. Reminder : Mangum is a new project and in an unstable/experimental state and may change a lot for the time being.","title":"How to deploy an ASGI app to Azure"},{"location":"azure-how-to/#how-to-deploy-an-asgi-app-to-azure","text":"This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information. The complete example project is available here .","title":"How to deploy an ASGI app to Azure"},{"location":"azure-how-to/#requirements","text":"Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser","title":"Requirements"},{"location":"azure-how-to/#step-1-create-the-function-app-in-azure","text":"In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line.","title":"Step 1 - Create the function app in Azure"},{"location":"azure-how-to/#step-2-setup-the-local-function-environment","text":"The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate","title":"Step 2 - Setup the local function environment"},{"location":"azure-how-to/#step-3-configure-the-local-python-project","text":"Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger.","title":"Step 3 - Configure the local Python project"},{"location":"azure-how-to/#step-4-implement-a-basic-asgi-application","text":"Install Mangum from pip: pip install mangum This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.handlers.azure import azure_handler class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) return azure_handler ( App , req ) This is a basic ASGI app example that uses the azure_handler that executes the ASGI HTTP request-response cycle. Run the app again with the following command to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint.","title":"Step 4 - Implement a basic ASGI application"},{"location":"azure-how-to/#step-5-deploy-the-asgi-app-function","text":"Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in app function, e.g.: Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test. Reminder : Mangum is a new project and in an unstable/experimental state and may change a lot for the time being.","title":"Step 5 - Deploy the ASGI app function"}]}