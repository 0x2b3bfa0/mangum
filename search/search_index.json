{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mangum Mangum is an adapter for using ASGI applications with AWS Lambda & API Gateway. It also provies an experimental CLI for handling deployments. This project may face periods of inactivity from time to time, but PRs are welcomed. Documentation : https://erm.github.io/mangum Requirements Python 3.7+ Installation pip3 install mangum Usage The adapter class Mangum accepts the following optional arguments: debug : bool (default=False) Enable a simple error response if an unhandled exception is raised in the adapter. spec_version : int (default=3) Set the ASGI specification version. ASGI 3 uses a single-callable, ASGI 2 uses a double-callable. enable_lifespan : bool (default=True) Specify whether or not to enable lifespan support. Example from mangum import Mangum async def app ( scope , receive , send ): await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain; charset=utf-8\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) handler = Mangum ( app , enable_lifespan = False ) # disable lifespan for raw ASGI example Frameworks Any ASGI framework should work with Mangum, however there are cases where certain non-ASGI behaviour of an application will cause issues when deploying to a serverless platform. You may also need to specify spec_version=2 for frameworks that do not support the latest ASGI version.","title":"Introduction"},{"location":"#mangum","text":"Mangum is an adapter for using ASGI applications with AWS Lambda & API Gateway. It also provies an experimental CLI for handling deployments. This project may face periods of inactivity from time to time, but PRs are welcomed. Documentation : https://erm.github.io/mangum","title":"Mangum"},{"location":"#requirements","text":"Python 3.7+","title":"Requirements"},{"location":"#installation","text":"pip3 install mangum","title":"Installation"},{"location":"#usage","text":"The adapter class Mangum accepts the following optional arguments: debug : bool (default=False) Enable a simple error response if an unhandled exception is raised in the adapter. spec_version : int (default=3) Set the ASGI specification version. ASGI 3 uses a single-callable, ASGI 2 uses a double-callable. enable_lifespan : bool (default=True) Specify whether or not to enable lifespan support.","title":"Usage"},{"location":"#example","text":"from mangum import Mangum async def app ( scope , receive , send ): await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain; charset=utf-8\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) handler = Mangum ( app , enable_lifespan = False ) # disable lifespan for raw ASGI example","title":"Example"},{"location":"#frameworks","text":"Any ASGI framework should work with Mangum, however there are cases where certain non-ASGI behaviour of an application will cause issues when deploying to a serverless platform. You may also need to specify spec_version=2 for frameworks that do not support the latest ASGI version.","title":"Frameworks"},{"location":"cli/","text":"Mangum CLI (experimental) Mangum provides a command-line interface for creating a deployment configuration and build, however the adapter class may be used standalone in any custom deployment. Note : This is a heavy work-in-progress, and it may be removed/changed at any point. Requirements Local AWS Credentials AWS CLI Installation There are two required dependencies for using the CLI, boto3 and click , they can be installed with Mangum using this command: pip install mangum [ full ] Commands mangum init - Create a new deployment configuration. mangum build - Create a local build. mangum deploy - Deploy the packaged project. mangum package - Package the local build. mangum describe - Retrieve the endpoints for the deployment. mangum validate - Validate the AWS CloudFormation template. Tutorial The steps below outline a basic FastAPI deployment, however you should be able to use any ASGI framework/application with the adapter. Step 1 - Create a local project First, create a new directory app/ , this is the folder that will contain the main application code and function handler. Then create a file asgi.py with the following: from mangum import Mangum from fastapi import FastAPI app = FastAPI () @app.post ( \"/items/\" ) def create_item ( item_id : int ): return { \"id\" : item_id } @app.get ( \"/items/\" ) def list_items (): items = [{ \"id\" : i } for i in range ( 10 )] return items @app.get ( \"/\" ) def read_root (): return { \"Hello\" : \"World!\" } handler = Mangum ( app ) This demonstrates a basic FastAPI application, the most relevant part is: handler = Mangum ( app ) The handler variable will be used as the handler name defined in the CloudFormation template to be generated later. Lastly, create a requirements.txt file to include Mangum and FastAPI in the build: mangum fastapi Step 2 - Create a new deployment configuration Run the following command with a name for the project (required) and optionally include the name of an S3 bucket and the region (these values can be changed later): mangum init <name> [ bucket-name ] [ region-name ] After defining the configuration a mangum.yml file will be generated, the current directory should now look this: \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 asgi.py \u251c\u2500\u2500 mangum.yml \u2514\u2500\u2500 requirements.txt Step 3 - Create a local build Run the following command to create a local application build: mangum build This will create a build/ directory containing the application code and any dependencies included in requirements.txt . Step 4 - Package the local build Run the following command to package the local build: mangum package This wraps the AWS CLI's package command, it uses the definitions in mangum.yml to produce a packaged.yml file and a template.yml file. Step 5 - Deploy the packaged build Run the following command to deploy the packaged build: mangum deploy This wraps the AWS CLI's deploy command. It may take a few minutes to complete. If successful, the endpoints for the deployed application will be displayed in the console.","title":"CLI"},{"location":"cli/#mangum-cli-experimental","text":"Mangum provides a command-line interface for creating a deployment configuration and build, however the adapter class may be used standalone in any custom deployment. Note : This is a heavy work-in-progress, and it may be removed/changed at any point.","title":"Mangum CLI (experimental)"},{"location":"cli/#requirements","text":"Local AWS Credentials AWS CLI","title":"Requirements"},{"location":"cli/#installation","text":"There are two required dependencies for using the CLI, boto3 and click , they can be installed with Mangum using this command: pip install mangum [ full ]","title":"Installation"},{"location":"cli/#commands","text":"mangum init - Create a new deployment configuration. mangum build - Create a local build. mangum deploy - Deploy the packaged project. mangum package - Package the local build. mangum describe - Retrieve the endpoints for the deployment. mangum validate - Validate the AWS CloudFormation template.","title":"Commands"},{"location":"cli/#tutorial","text":"The steps below outline a basic FastAPI deployment, however you should be able to use any ASGI framework/application with the adapter.","title":"Tutorial"},{"location":"cli/#step-1-create-a-local-project","text":"First, create a new directory app/ , this is the folder that will contain the main application code and function handler. Then create a file asgi.py with the following: from mangum import Mangum from fastapi import FastAPI app = FastAPI () @app.post ( \"/items/\" ) def create_item ( item_id : int ): return { \"id\" : item_id } @app.get ( \"/items/\" ) def list_items (): items = [{ \"id\" : i } for i in range ( 10 )] return items @app.get ( \"/\" ) def read_root (): return { \"Hello\" : \"World!\" } handler = Mangum ( app ) This demonstrates a basic FastAPI application, the most relevant part is: handler = Mangum ( app ) The handler variable will be used as the handler name defined in the CloudFormation template to be generated later. Lastly, create a requirements.txt file to include Mangum and FastAPI in the build: mangum fastapi","title":"Step 1 - Create a local project"},{"location":"cli/#step-2-create-a-new-deployment-configuration","text":"Run the following command with a name for the project (required) and optionally include the name of an S3 bucket and the region (these values can be changed later): mangum init <name> [ bucket-name ] [ region-name ] After defining the configuration a mangum.yml file will be generated, the current directory should now look this: \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 asgi.py \u251c\u2500\u2500 mangum.yml \u2514\u2500\u2500 requirements.txt","title":"Step 2 - Create a new deployment configuration"},{"location":"cli/#step-3-create-a-local-build","text":"Run the following command to create a local application build: mangum build This will create a build/ directory containing the application code and any dependencies included in requirements.txt .","title":"Step 3 - Create a local build"},{"location":"cli/#step-4-package-the-local-build","text":"Run the following command to package the local build: mangum package This wraps the AWS CLI's package command, it uses the definitions in mangum.yml to produce a packaged.yml file and a template.yml file.","title":"Step 4 - Package the local build"},{"location":"cli/#step-5-deploy-the-packaged-build","text":"Run the following command to deploy the packaged build: mangum deploy This wraps the AWS CLI's deploy command. It may take a few minutes to complete. If successful, the endpoints for the deployed application will be displayed in the console.","title":"Step 5 - Deploy the packaged build"}]}