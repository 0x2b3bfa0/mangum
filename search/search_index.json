{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mangum Documentation : https://erm.github.io/mangum/ Mangum is a library for using ASGI applications with FaaS platforms. Requirements Python 3.6+ Installation $ pip3 install mangum Dependencies There are required/optional dependencies for specific platforms being used, but the base install does not have any hard requirements: azure-functions - required for Azure Function support. Can be installed using: $ pip3 install mangum [ azure ] boto3 , click - required for the AWS-specific CLI tools (this is NOT required in deployments): $ pip3 install mangum [ aws ] Everything can be installed with: $ pip3 install mangum [ full ] Supported Platforms Only two platforms are currently supported, but if you'd like to see others, please open an issue. AWS Lambda / API Gateway To make an ASGI application compatible with AWS Lambda & AWS Gateway, wrap it in the AWSLambdaMiddleware : from mangum.platforms.aws.middleware import AWSLambdaMiddleware from yourapp.app import app handler = AWSLambdaMiddleware ( app ) # optionally set debug=True For this example, you would need to specify your lambda event handler as asgi.handler . Note : This platform middleware can also use an optional debug argument to return unhandled errors raised by the application. It should NOT be enabled outside of development. Azure Functions Similarly as above, wrap the application using the AzureFunctionMiddleware : from mangum.platforms.azure.middleware import AzureFunctionMiddleware from yourapp.app import app handler = AzureFunctionMiddleware ( app ) A basic quickstart guide for using Azure Functions with Mangum is outlined here . Mangum CLI (experimental) Experimental AWS packaging/deployment support. This requires installation of the optional dependencies for AWS: $ pip install mangum [ full ] It also requires: AWS CLI AWS credentials. The available commands are briefly outlined below, but there is also a quickstart guide here : mangum aws init - Create a new configuration template for an application. mangum aws build - Install the requirements and copy the application files into the build directory. mangum aws package - Package the local project to prepare for deployment. mangum aws deploy - Deploy the packaged application to AWS. mangum aws tail - Tail the last 10 minutes of CloudWatch for the function. mangum aws describe - Retrieve the API endpoints for the function. mangum aws validate - Validate the SAM template in the current configuration.","title":"Introduction"},{"location":"#mangum","text":"Documentation : https://erm.github.io/mangum/ Mangum is a library for using ASGI applications with FaaS platforms.","title":"Mangum"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"$ pip3 install mangum","title":"Installation"},{"location":"#dependencies","text":"There are required/optional dependencies for specific platforms being used, but the base install does not have any hard requirements: azure-functions - required for Azure Function support. Can be installed using: $ pip3 install mangum [ azure ] boto3 , click - required for the AWS-specific CLI tools (this is NOT required in deployments): $ pip3 install mangum [ aws ] Everything can be installed with: $ pip3 install mangum [ full ]","title":"Dependencies"},{"location":"#supported-platforms","text":"Only two platforms are currently supported, but if you'd like to see others, please open an issue.","title":"Supported Platforms"},{"location":"#aws-lambda-api-gateway","text":"To make an ASGI application compatible with AWS Lambda & AWS Gateway, wrap it in the AWSLambdaMiddleware : from mangum.platforms.aws.middleware import AWSLambdaMiddleware from yourapp.app import app handler = AWSLambdaMiddleware ( app ) # optionally set debug=True For this example, you would need to specify your lambda event handler as asgi.handler . Note : This platform middleware can also use an optional debug argument to return unhandled errors raised by the application. It should NOT be enabled outside of development.","title":"AWS Lambda / API Gateway"},{"location":"#azure-functions","text":"Similarly as above, wrap the application using the AzureFunctionMiddleware : from mangum.platforms.azure.middleware import AzureFunctionMiddleware from yourapp.app import app handler = AzureFunctionMiddleware ( app ) A basic quickstart guide for using Azure Functions with Mangum is outlined here .","title":"Azure Functions"},{"location":"#mangum-cli-experimental","text":"Experimental AWS packaging/deployment support. This requires installation of the optional dependencies for AWS: $ pip install mangum [ full ] It also requires: AWS CLI AWS credentials. The available commands are briefly outlined below, but there is also a quickstart guide here : mangum aws init - Create a new configuration template for an application. mangum aws build - Install the requirements and copy the application files into the build directory. mangum aws package - Package the local project to prepare for deployment. mangum aws deploy - Deploy the packaged application to AWS. mangum aws tail - Tail the last 10 minutes of CloudWatch for the function. mangum aws describe - Retrieve the API endpoints for the function. mangum aws validate - Validate the SAM template in the current configuration.","title":"Mangum CLI (experimental)"},{"location":"aws-how-to/","text":"How to deploy an ASGI app to AWS Lambda & API Gateway This guide will explain how to generate a basic AWS Lambda deployment configuration suitable for ASGI applications. Mangum includes tools to assist with generating AWS SAM (Serverless Application Model) templates and handling packaging/deployment. Note : The AWS configuration generation methods are currently experimental (may change). Requirements Python 3.6+ AWS-CLI AWS credentials Step 1 - Setup and configuration First, install Mangum with all the optional dependencies (needed for AWS): $ pip3 install mangum [ aws ] Begin the process of generating a project. You should initiate this in a directory above your application: $ mangum init After answering a series of questions, a few boilerplate configuration files will be generated in the current directory: settings.json The file with all the AWS resource details, needed to inform the AWS CLI wrapper methods with the correct parameters. This should not be modified directly. template.yaml The AWS SAM template used to define the resources/stack. This may be modified as needed to specify additional configuration according to the SAM spec. requirements.txt All that Python packages that should be installed in the build directory. It contains only mangum by default as it is the only requirement for the ASGI adapter. asgi.py This is the module that is specified in the generated SAM template. It contains the following: from mangum.platforms.aws.middleware import AWSLambdaMiddleware from YourApp.app import app handler = AWSLambdaMiddleware ( app ) # optionally set debug=True You will need to modify the asgi.py file to import your application to be run by the middleware. Alternatively, you may update the template.yaml to point directly to a different handler location - the asgi.py is included for convenience. After generating the configuration, the file structure should look something like this: \u251c\u2500\u2500 YourProject \u2502 \u251c\u2500\u2500 YourApp/ \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 packaged.yaml \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 settings.json \u2502 \u2514\u2500\u2500 template.yaml Step 2 - Build the application Next you will be prompted to run: $ mangum aws build This will install all the packages listed in requirements.txt and copy over your application to the build/ directory to be packaged. Step 3 - Packaging for deployment Next run the package command to prepare the application build for deployment: $ mangum package After the packaging completes, you may then deploy: $ mangum deploy Note : This may take awhile. If the deployment is successful, then the API endpoints for the stages will be displayed: Deployment successful! API endpoints available at: * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Prod * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Stage If you run into any issues, you can lookup the function logs in CloudWatch or enter the following command: $ mangum tail This will tail the last 10 minutes of logs activity for the function.","title":"How to deploy an ASGI app to AWS Lambda & API Gateway"},{"location":"aws-how-to/#how-to-deploy-an-asgi-app-to-aws-lambda-api-gateway","text":"This guide will explain how to generate a basic AWS Lambda deployment configuration suitable for ASGI applications. Mangum includes tools to assist with generating AWS SAM (Serverless Application Model) templates and handling packaging/deployment. Note : The AWS configuration generation methods are currently experimental (may change).","title":"How to deploy an ASGI app to AWS Lambda &amp; API Gateway"},{"location":"aws-how-to/#requirements","text":"Python 3.6+ AWS-CLI AWS credentials","title":"Requirements"},{"location":"aws-how-to/#step-1-setup-and-configuration","text":"First, install Mangum with all the optional dependencies (needed for AWS): $ pip3 install mangum [ aws ] Begin the process of generating a project. You should initiate this in a directory above your application: $ mangum init After answering a series of questions, a few boilerplate configuration files will be generated in the current directory: settings.json The file with all the AWS resource details, needed to inform the AWS CLI wrapper methods with the correct parameters. This should not be modified directly. template.yaml The AWS SAM template used to define the resources/stack. This may be modified as needed to specify additional configuration according to the SAM spec. requirements.txt All that Python packages that should be installed in the build directory. It contains only mangum by default as it is the only requirement for the ASGI adapter. asgi.py This is the module that is specified in the generated SAM template. It contains the following: from mangum.platforms.aws.middleware import AWSLambdaMiddleware from YourApp.app import app handler = AWSLambdaMiddleware ( app ) # optionally set debug=True You will need to modify the asgi.py file to import your application to be run by the middleware. Alternatively, you may update the template.yaml to point directly to a different handler location - the asgi.py is included for convenience. After generating the configuration, the file structure should look something like this: \u251c\u2500\u2500 YourProject \u2502 \u251c\u2500\u2500 YourApp/ \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 packaged.yaml \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 settings.json \u2502 \u2514\u2500\u2500 template.yaml","title":"Step 1 - Setup and configuration"},{"location":"aws-how-to/#step-2-build-the-application","text":"Next you will be prompted to run: $ mangum aws build This will install all the packages listed in requirements.txt and copy over your application to the build/ directory to be packaged.","title":"Step 2 - Build the application"},{"location":"aws-how-to/#step-3-packaging-for-deployment","text":"Next run the package command to prepare the application build for deployment: $ mangum package After the packaging completes, you may then deploy: $ mangum deploy Note : This may take awhile. If the deployment is successful, then the API endpoints for the stages will be displayed: Deployment successful! API endpoints available at: * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Prod * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Stage If you run into any issues, you can lookup the function logs in CloudWatch or enter the following command: $ mangum tail This will tail the last 10 minutes of logs activity for the function.","title":"Step 3 - Packaging for deployment"},{"location":"azure-how-to/","text":"How to deploy an ASGI app to Azure Functions This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information. Requirements Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser Step 1 - Create the function app in Azure In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line. Step 2 - Setup the local function environment The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate Step 3 - Configure the local Python project Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger. Step 4 - Implement a basic ASGI application Install Mangum from pip, the azure extras packages are required: $ pip install mangum [ azure ] This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.platforms.azure.middleware import AzureFunctionMiddleware class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) handler = AzureFunctionMiddleware ( App ) return handler ( req ) This is a basic ASGI app example that uses the AzureFunctionMiddleware to execute the ASGI HTTP request-response cycle and return a valid response for Azure Functions. Run the app again to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint. Step 5 - Deploy the ASGI app function Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in the app deployment. Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test.","title":"How to deploy an ASGI app to Azure Functions"},{"location":"azure-how-to/#how-to-deploy-an-asgi-app-to-azure-functions","text":"This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information.","title":"How to deploy an ASGI app to Azure Functions"},{"location":"azure-how-to/#requirements","text":"Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser","title":"Requirements"},{"location":"azure-how-to/#step-1-create-the-function-app-in-azure","text":"In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line.","title":"Step 1 - Create the function app in Azure"},{"location":"azure-how-to/#step-2-setup-the-local-function-environment","text":"The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate","title":"Step 2 - Setup the local function environment"},{"location":"azure-how-to/#step-3-configure-the-local-python-project","text":"Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger.","title":"Step 3 - Configure the local Python project"},{"location":"azure-how-to/#step-4-implement-a-basic-asgi-application","text":"Install Mangum from pip, the azure extras packages are required: $ pip install mangum [ azure ] This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.platforms.azure.middleware import AzureFunctionMiddleware class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) handler = AzureFunctionMiddleware ( App ) return handler ( req ) This is a basic ASGI app example that uses the AzureFunctionMiddleware to execute the ASGI HTTP request-response cycle and return a valid response for Azure Functions. Run the app again to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint.","title":"Step 4 - Implement a basic ASGI application"},{"location":"azure-how-to/#step-5-deploy-the-asgi-app-function","text":"Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in the app deployment. Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test.","title":"Step 5 - Deploy the ASGI app function"}]}