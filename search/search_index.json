{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mangum Mangum is a library for using ASGI applications with FaaS platforms. Important : This project is under active development and in an experimental/unstable state. Requirements Python 3.6+ Installation $ pip3 install mangum Dependencies Currently there are two optional dependencies. azure-functions - Required for Azure. boto3 - Required for the AWS CLI commands. This can be installed with: $ pip3 install mangum [ full ] Supported Platforms Only two platforms are currently supported, but if you'd like to see others, please open an issue. AWS Lambda / API Gateway Example Below is a basic ASGI application example using the AWS run method: from mangum.platforms.aws.adapter import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) def lambda_handler ( event , context ): return run_asgi ( App , event , context ) Mangum CLI (experimental) Experimental AWS packaging/deployment support to generate, package, and deploy an application. This requires installation of the optional dependencies for AWS: $ pip install mangum [ full ] It also requires the AWS CLI and AWS credentials. The available commands are briefly outlined below, but there is also a quickstart guide here : mangum init - Create a new application and deployment configuration. mangum package - Package the local project to prepare for deployment. mangum deploy - Deploy the packaged application to AWS. mangum tail - Tail the last 10 minutes of CloudWatch for the function. mangum describe - Retrieve the API endpoints for the function. Azure Functions Example The same example application as above may be used with the Azure run method: from mangum.platforms.azure.adapter import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) def lambda_handler ( req ): return run_asgi ( App , req ) The command-line tools for Azure Functions can do pretty much everything you need. A basic quickstart guide for using it with Mangum is outlined here .","title":"Introduction"},{"location":"#mangum","text":"Mangum is a library for using ASGI applications with FaaS platforms. Important : This project is under active development and in an experimental/unstable state.","title":"Mangum"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"$ pip3 install mangum","title":"Installation"},{"location":"#dependencies","text":"Currently there are two optional dependencies. azure-functions - Required for Azure. boto3 - Required for the AWS CLI commands. This can be installed with: $ pip3 install mangum [ full ]","title":"Dependencies"},{"location":"#supported-platforms","text":"Only two platforms are currently supported, but if you'd like to see others, please open an issue.","title":"Supported Platforms"},{"location":"#aws-lambda-api-gateway","text":"","title":"AWS Lambda / API Gateway"},{"location":"#example","text":"Below is a basic ASGI application example using the AWS run method: from mangum.platforms.aws.adapter import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) def lambda_handler ( event , context ): return run_asgi ( App , event , context )","title":"Example"},{"location":"#mangum-cli-experimental","text":"Experimental AWS packaging/deployment support to generate, package, and deploy an application. This requires installation of the optional dependencies for AWS: $ pip install mangum [ full ] It also requires the AWS CLI and AWS credentials. The available commands are briefly outlined below, but there is also a quickstart guide here : mangum init - Create a new application and deployment configuration. mangum package - Package the local project to prepare for deployment. mangum deploy - Deploy the packaged application to AWS. mangum tail - Tail the last 10 minutes of CloudWatch for the function. mangum describe - Retrieve the API endpoints for the function.","title":"Mangum CLI (experimental)"},{"location":"#azure-functions","text":"","title":"Azure Functions"},{"location":"#example_1","text":"The same example application as above may be used with the Azure run method: from mangum.platforms.azure.adapter import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello, world!\" }) def lambda_handler ( req ): return run_asgi ( App , req ) The command-line tools for Azure Functions can do pretty much everything you need. A basic quickstart guide for using it with Mangum is outlined here .","title":"Example"},{"location":"aws-how-to/","text":"How to deploy an ASGI app to AWS Lambda & API Gateway This guide will explain how to deploy a basic ASGI application to AWS Lambda & API Gateway. Mangum includes tools to assist with generating an example ASGI application using a AWS SAM (Serverless Application Model) template. Note : These commands-much like most of the project currently-are being actively developed and may be buggy. Requirements Python 3.6+ AWS-CLI AWS credentials Step 1 - Setup and configuration First, install Mangum with all the optional dependencies (needed for AWS): $ pip3 install mangum [ full ] Begin the process of generating a project: $ mangum init After answering a series of questions, the following will be generated in the current directory: A boilerplate ASGI app with the latest version of mangum installed from PyPi for deployment to AWS. A settings.json file with the generated AWS resource information. An S3 bucket to be used with the app. A template.yaml containing the AWS SAM template. Once the initial configuration step is complete, you should have an app structure that looks like this: \u251c\u2500\u2500 hello_world_project \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 template.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 settings.json Step 2 - Packaging and deployment You will then be prompted to enter the package and deploy commands, the settings.json file is used to inform the parameters used with the methods that wrap the AWS CLI commands. The package command also populates the build/ directory by installing the packages in the requirements.txt , by default the mangum package will appear. $ mangum package After running the package command the build directory should look like this: \u2502 \u251c\u2500\u2500 build \u2502 \u2502 \u251c\u2500\u2500 app.py \u2502 \u2502 \u251c\u2500\u2500 bin \u2502 \u2502 \u251c\u2500\u2500 mangum \u2502 \u2502 \u2514\u2500\u2500 mangum-x.x.x-pyx.x.egg-info After packaging, you then can deploy: $ mangum deploy Note : This may take awhile. If the deployment is successful, then the API endpoints for the stages will be displayed: Deployment successful! API endpoints available at: * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Prod * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Stage Visiting the endpoint should then produce a simple \"Hello World\" response. If you run into any issues, you can lookup the function logs in CloudWatch or enter the following command: $ mangum tail This will tail the last 10 minutes of logs activity for the function. Using ASGI frameworks The generated \"hello world\" application is a raw example, but you can easily use any ASGI framework with the adapter. For example, you could replace the content of the app.py generated previously with a Starlette application to achieve a similar result: from mangum.platforms.aws.adapter import run_asgi from starlette.applications import Starlette from starlette.responses import JSONResponse app = Starlette () @app.route ( \"/\" ) async def homepage ( request ): return JSONResponse ({ \"hello\" : \"world\" }) def lambda_handler ( event , context ): return run_asgi ( app , event , context ) You would also have to include Starlette as a dependency in the package by adding it to the requirements.txt . And re-run the mangum package and mangum deploy commands to update the function. Additional considerations The application generation and deployment tools included in Mangum are mainly intended to quickly produce and deploy a very basic boilerplate application. Keep in mind: As of this writing, only simple application examples have been tested with the adapters (work-in-progress). AWS SAM templates are not the only way to handle deployment and configuration, it was chosen here because it offered the path of least resistance to getting an app generated and deployed with all the necessary permissions/resources/roles/etc. included. You will need to manually edit the generated AWS SAM template to extend the functionality of the stack and leverage additional AWS services. At some point it would be nice to improve the CLI tool to be more comprehensive with some validation/safety features and possibly a way to eliminate the AWS-CLI as a requirement for deployment/packaging. There is an open issue for doing so here .","title":"How to deploy an ASGI app to AWS Lambda & API Gateway"},{"location":"aws-how-to/#how-to-deploy-an-asgi-app-to-aws-lambda-api-gateway","text":"This guide will explain how to deploy a basic ASGI application to AWS Lambda & API Gateway. Mangum includes tools to assist with generating an example ASGI application using a AWS SAM (Serverless Application Model) template. Note : These commands-much like most of the project currently-are being actively developed and may be buggy.","title":"How to deploy an ASGI app to AWS Lambda &amp; API Gateway"},{"location":"aws-how-to/#requirements","text":"Python 3.6+ AWS-CLI AWS credentials","title":"Requirements"},{"location":"aws-how-to/#step-1-setup-and-configuration","text":"First, install Mangum with all the optional dependencies (needed for AWS): $ pip3 install mangum [ full ] Begin the process of generating a project: $ mangum init After answering a series of questions, the following will be generated in the current directory: A boilerplate ASGI app with the latest version of mangum installed from PyPi for deployment to AWS. A settings.json file with the generated AWS resource information. An S3 bucket to be used with the app. A template.yaml containing the AWS SAM template. Once the initial configuration step is complete, you should have an app structure that looks like this: \u251c\u2500\u2500 hello_world_project \u2502 \u251c\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 template.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 settings.json","title":"Step 1 - Setup and configuration"},{"location":"aws-how-to/#step-2-packaging-and-deployment","text":"You will then be prompted to enter the package and deploy commands, the settings.json file is used to inform the parameters used with the methods that wrap the AWS CLI commands. The package command also populates the build/ directory by installing the packages in the requirements.txt , by default the mangum package will appear. $ mangum package After running the package command the build directory should look like this: \u2502 \u251c\u2500\u2500 build \u2502 \u2502 \u251c\u2500\u2500 app.py \u2502 \u2502 \u251c\u2500\u2500 bin \u2502 \u2502 \u251c\u2500\u2500 mangum \u2502 \u2502 \u2514\u2500\u2500 mangum-x.x.x-pyx.x.egg-info After packaging, you then can deploy: $ mangum deploy Note : This may take awhile. If the deployment is successful, then the API endpoints for the stages will be displayed: Deployment successful! API endpoints available at: * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Prod * https://xxxxx.execute-api.ap-southeast-1.amazonaws.com/Stage Visiting the endpoint should then produce a simple \"Hello World\" response. If you run into any issues, you can lookup the function logs in CloudWatch or enter the following command: $ mangum tail This will tail the last 10 minutes of logs activity for the function.","title":"Step 2 - Packaging and deployment"},{"location":"aws-how-to/#using-asgi-frameworks","text":"The generated \"hello world\" application is a raw example, but you can easily use any ASGI framework with the adapter. For example, you could replace the content of the app.py generated previously with a Starlette application to achieve a similar result: from mangum.platforms.aws.adapter import run_asgi from starlette.applications import Starlette from starlette.responses import JSONResponse app = Starlette () @app.route ( \"/\" ) async def homepage ( request ): return JSONResponse ({ \"hello\" : \"world\" }) def lambda_handler ( event , context ): return run_asgi ( app , event , context ) You would also have to include Starlette as a dependency in the package by adding it to the requirements.txt . And re-run the mangum package and mangum deploy commands to update the function.","title":"Using ASGI frameworks"},{"location":"aws-how-to/#additional-considerations","text":"The application generation and deployment tools included in Mangum are mainly intended to quickly produce and deploy a very basic boilerplate application. Keep in mind: As of this writing, only simple application examples have been tested with the adapters (work-in-progress). AWS SAM templates are not the only way to handle deployment and configuration, it was chosen here because it offered the path of least resistance to getting an app generated and deployed with all the necessary permissions/resources/roles/etc. included. You will need to manually edit the generated AWS SAM template to extend the functionality of the stack and leverage additional AWS services. At some point it would be nice to improve the CLI tool to be more comprehensive with some validation/safety features and possibly a way to eliminate the AWS-CLI as a requirement for deployment/packaging. There is an open issue for doing so here .","title":"Additional considerations"},{"location":"azure-how-to/","text":"How to deploy an ASGI app to Azure Functions This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information. The complete example project is available here . Requirements Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser Step 1 - Create the function app in Azure In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line. Step 2 - Setup the local function environment The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate Step 3 - Configure the local Python project Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger. Step 4 - Implement a basic ASGI application Install Mangum from pip: pip install mangum This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.adapters.azure import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) return run_asgi ( App , req ) This is a basic ASGI app example that uses the run_asgi method to execute the ASGI HTTP request-response cycle. Run the app again with the following command to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint. Step 5 - Deploy the ASGI app function Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in the app deployment. Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test. Reminder : Mangum is a new project and in an unstable/experimental state and may change a lot for the time being.","title":"How to deploy an ASGI app to Azure Functions"},{"location":"azure-how-to/#how-to-deploy-an-asgi-app-to-azure-functions","text":"This guide will explain how to deploy a basic ASGI application to Azure Functions. There is also an official guide that explains much of the same information. The complete example project is available here .","title":"How to deploy an ASGI app to Azure Functions"},{"location":"azure-how-to/#requirements","text":"Python 3.6 Azure Functions Core Tools Azure CLI A terminal and a browser","title":"Requirements"},{"location":"azure-how-to/#step-1-create-the-function-app-in-azure","text":"In the Azure portal, click Create a Resource to display the app marketplace, then select Serverless Function App to begin. Enter a name for the app function, this should automatically populate a few other inputs as well. The important fields for the purposes of this guide are listed below: OS: Linux (Preview) Publish: Code Runtime Stack: Python Hosting Plan: Consumption Plan After the form is submitted the deployment process will begin. A successful deployment notification should appear in the Azure portal once complete. The rest of the guide will be in the command-line.","title":"Step 1 - Create the function app in Azure"},{"location":"azure-how-to/#step-2-setup-the-local-function-environment","text":"The Azure Functions Core Tools are required to continue, they may be installed using npm: npm install -g azure-functions-core-tools An active Python 3.6 virtual environment must be running to run Python function apps. Assuming Python 3.6 is in the system path, enter the following: python3.6 -m venv venv . venv/bin/activate","title":"Step 2 - Setup the local function environment"},{"location":"azure-how-to/#step-3-configure-the-local-python-project","text":"Run the following to create a local project: func init Select the option for Python and it will begin installing some packages. Once completed, run the next command to select a template: func new Then select the option for HTTP Trigger , this template will be used for the HTTP example. This example uses the default trigger name, HttpTrigger . After selecting the template, run the following command to test the default project: func start then visit the URL displayed in the terminal, e.g. http://localhost:7071/api/HttpTrigger.","title":"Step 3 - Configure the local Python project"},{"location":"azure-how-to/#step-4-implement-a-basic-asgi-application","text":"Install Mangum from pip: pip install mangum This will provide a handler method that adapts the Azure Function request events into requests that an ASGI app can understand. In the current project folder, open the file located at <project name>/HttpTrigger/__init__.py in an editor. The default app code will look something like this: import logging import azure.functions as func def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( 'Python HTTP trigger function processed a request.' ) name = req . params . get ( 'name' ) if not name : try : req_body = req . get_json () except ValueError : pass else : name = req_body . get ( 'name' ) if name : return func . HttpResponse ( f \"Hello {name}!\" ) else : return func . HttpResponse ( \"Please pass a name on the query string or in the request body\" , status_code = 400 ) Replace this completely with the following and save: import logging import azure.functions as func from mangum.adapters.azure import run_asgi class App : def __init__ ( self , scope ) -> None : self . scope = scope async def __call__ ( self , receive , send ) -> None : message = await receive () if message [ \"type\" ] == \"http.request\" : await send ( { \"type\" : \"http.response.start\" , \"status\" : 200 , \"headers\" : [[ b \"content-type\" , b \"text/plain\" ]], } ) await send ({ \"type\" : \"http.response.body\" , \"body\" : b \"Hello!\" }) def main ( req : func . HttpRequest ) -> func . HttpResponse : logging . info ( \"Python HTTP trigger function processed a request.\" ) return run_asgi ( App , req ) This is a basic ASGI app example that uses the run_asgi method to execute the ASGI HTTP request-response cycle. Run the app again with the following command to see the new output: func start If all worked correctly, then Hello! should appear at the browser endpoint.","title":"Step 4 - Implement a basic ASGI application"},{"location":"azure-how-to/#step-5-deploy-the-asgi-app-function","text":"Before deploying, one more thing needs to be done, include mangum in the requirements.txt file and save. This will be necessary to install the requirement in the app deployment. Next run the following command using the app name defined in the app creation form to publish the local Python project, e.g. for a project named \"mangum\": func azure functionapp publish mangum This will begin the upload process, the terminal will display something like: Preparing archive... Uploading 72.39 MB [################################################################] Upload completed successfully. Deployment completed successfully. Syncing triggers... Functions in mangum: HttpTrigger - [httpTrigger] Invoke url: https://mangum.azurewebsites.net/api/httptrigger?code=x Then visiting the invoke url should display the same Hello! response that appeared in the local test. Reminder : Mangum is a new project and in an unstable/experimental state and may change a lot for the time being.","title":"Step 5 - Deploy the ASGI app function"}]}